"""
Advanced Configuration Manager for Trading Bot
Handles dynamic configuration updates and validation
"""

import streamlit as st
import json
import os
import importlib
import sys

class ConfigManager:
    def __init__(self, config_path="config.py"):
        self.config_path = config_path
        self.config_backup_path = "config_backup.py"
        
    def load_current_config(self):
        """Load current configuration values"""
        try:
            # Import config module
            if 'config' in sys.modules:
                importlib.reload(sys.modules['config'])
            import config
            
            return {
                # API Configuration
                'API_KEY': getattr(config, 'API_KEY', ''),
                'API_SECRET': getattr(config, 'API_SECRET', ''),
                'BASE_URL': getattr(config, 'BASE_URL', ''),
                
                # Trading Configuration
                'SYMBOL': getattr(config, 'SYMBOL', 'BTCUSD'),
                'PRODUCT_ID': getattr(config, 'PRODUCT_ID', 27),
                
                # Strategy Parameters
                'EMA_SHORT': getattr(config, 'EMA_SHORT', 9),
                'EMA_LONG': getattr(config, 'EMA_LONG', 20),
                'ATR_PERIOD': getattr(config, 'ATR_PERIOD', 14),
                'ATR_MULTIPLIER': getattr(config, 'ATR_MULTIPLIER', 0.5),
                'RISK_REWARD_RATIO': getattr(config, 'RISK_REWARD_RATIO', 10),
                'TRAILING_SL': getattr(config, 'TRAILING_SL', True),
                'STRATEGY_VERSION': getattr(config, 'STRATEGY_VERSION', 'v3'),
                
                # Capital Management
                'PAPER_TRADING_CAPITAL': getattr(config, 'PAPER_TRADING_CAPITAL', 500),
                'LIVE_TRADING_CAPITAL': getattr(config, 'LIVE_TRADING_CAPITAL', 100),
                'MAX_RISK_PER_TRADE': getattr(config, 'MAX_RISK_PER_TRADE', 0.02),
            }
        except Exception as e:
            st.error(f"Error loading configuration: {str(e)}")
            return {}
    
    def validate_config(self, config_data):
        """Validate configuration parameters"""
        errors = []
        
        # Strategy validation
        if config_data['EMA_SHORT'] >= config_data['EMA_LONG']:
            errors.append("EMA Short period must be less than EMA Long period")
        
        if config_data['ATR_PERIOD'] < 1 or config_data['ATR_PERIOD'] > 100:
            errors.append("ATR Period must be between 1 and 100")
        
        if config_data['ATR_MULTIPLIER'] < 0.1 or config_data['ATR_MULTIPLIER'] > 10:
            errors.append("ATR Multiplier must be between 0.1 and 10")
        
        if config_data['RISK_REWARD_RATIO'] < 1 or config_data['RISK_REWARD_RATIO'] > 50:
            errors.append("Risk-Reward Ratio must be between 1 and 50")
        
        # Capital validation
        if config_data['PAPER_TRADING_CAPITAL'] < 100:
            errors.append("Paper Trading Capital must be at least $100")
        
        if config_data['LIVE_TRADING_CAPITAL'] < 50:
            errors.append("Live Trading Capital must be at least $50")
        
        if config_data['MAX_RISK_PER_TRADE'] < 0.005 or config_data['MAX_RISK_PER_TRADE'] > 0.2:
            errors.append("Max Risk Per Trade must be between 0.5% and 20%")
        
        return errors
    
    def backup_config(self):
        """Create backup of current config"""
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, 'r') as src:
                    content = src.read()
                with open(self.config_backup_path, 'w') as dst:
                    dst.write(content)
                return True
        except Exception as e:
            st.error(f"Error creating backup: {str(e)}")
            return False
    
    def save_config(self, config_data):
        """Save configuration to file"""
        try:
            # Create backup first
            if not self.backup_config():
                return False
            
            # Generate new config file content
            config_content = f'''# Delta Exchange Live Trading Configuration
# Generated by Trading Dashboard at {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

# API Credentials
API_KEY = "{config_data['API_KEY']}"
API_SECRET = "{config_data['API_SECRET']}"

# API Endpoints
BASE_URL = "{config_data['BASE_URL']}"
WEBSOCKET_URL = "wss://socket.india.delta.exchange"

# Trading Configuration
SYMBOL = "{config_data['SYMBOL']}"
PRODUCT_ID = {config_data['PRODUCT_ID']}

# Strategy Parameters
EMA_SHORT = {config_data['EMA_SHORT']}
EMA_LONG = {config_data['EMA_LONG']}
ATR_PERIOD = {config_data['ATR_PERIOD']}
ATR_MULTIPLIER = {config_data['ATR_MULTIPLIER']}
RISK_REWARD_RATIO = {config_data['RISK_REWARD_RATIO']}

# Backtest Data File
BACKTEST_DATA_FILE = "data/raw_data/btc_1h_historical_20250813_230350.csv"

# Strategy version selector
STRATEGY_VERSION = "{config_data['STRATEGY_VERSION']}"

# Trailing Stop Loss setting
TRAILING_SL = {config_data['TRAILING_SL']}

# Position Sizing
INITIAL_CAPITAL = {config_data['LIVE_TRADING_CAPITAL']}
PAPER_TRADING_CAPITAL = {config_data['PAPER_TRADING_CAPITAL']}
LIVE_TRADING_CAPITAL = {config_data['LIVE_TRADING_CAPITAL']}
MAX_RISK_PER_TRADE = {config_data['MAX_RISK_PER_TRADE']}
'''
            
            # Write to file
            with open(self.config_path, 'w') as f:
                f.write(config_content)
            
            # Reload config module
            if 'config' in sys.modules:
                importlib.reload(sys.modules['config'])
            
            return True
            
        except Exception as e:
            st.error(f"Error saving configuration: {str(e)}")
            return False
    
    def load_preset(self, preset_name):
        """Load predefined configuration presets"""
        presets = {
            "Conservative": {
                'EMA_SHORT': 12,
                'EMA_LONG': 26,
                'ATR_PERIOD': 20,
                'ATR_MULTIPLIER': 1.0,
                'RISK_REWARD_RATIO': 15,
                'MAX_RISK_PER_TRADE': 0.01,  # 1%
                'TRAILING_SL': True
            },
            "Aggressive": {
                'EMA_SHORT': 5,
                'EMA_LONG': 15,
                'ATR_PERIOD': 10,
                'ATR_MULTIPLIER': 0.3,
                'RISK_REWARD_RATIO': 5,
                'MAX_RISK_PER_TRADE': 0.05,  # 5%
                'TRAILING_SL': True
            },
            "Scalping": {
                'EMA_SHORT': 3,
                'EMA_LONG': 8,
                'ATR_PERIOD': 7,
                'ATR_MULTIPLIER': 0.2,
                'RISK_REWARD_RATIO': 3,
                'MAX_RISK_PER_TRADE': 0.03,  # 3%
                'TRAILING_SL': False
            }
        }
        
        if preset_name in presets:
            current_config = self.load_current_config()
            current_config.update(presets[preset_name])
            return self.save_config(current_config)
        return False
    
    def reset_to_defaults(self):
        """Reset configuration to default values"""
        default_config = {
            'API_KEY': '',
            'API_SECRET': '',
            'BASE_URL': 'https://api.india.delta.exchange',
            'SYMBOL': 'BTCUSD',
            'PRODUCT_ID': 27,
            'EMA_SHORT': 9,
            'EMA_LONG': 20,
            'ATR_PERIOD': 14,
            'ATR_MULTIPLIER': 0.5,
            'RISK_REWARD_RATIO': 10,
            'TRAILING_SL': True,
            'STRATEGY_VERSION': 'v3',
            'PAPER_TRADING_CAPITAL': 500,
            'LIVE_TRADING_CAPITAL': 100,
            'MAX_RISK_PER_TRADE': 0.02
        }
        return self.save_config(default_config)
    
    def restore_from_backup(self):
        """Restore configuration from backup"""
        try:
            if os.path.exists(self.config_backup_path):
                with open(self.config_backup_path, 'r') as src:
                    content = src.read()
                with open(self.config_path, 'w') as dst:
                    dst.write(content)
                
                # Reload config module
                if 'config' in sys.modules:
                    importlib.reload(sys.modules['config'])
                
                return True
            else:
                st.error("No backup file found")
                return False
        except Exception as e:
            st.error(f"Error restoring from backup: {str(e)}")
            return False

    def render_config_editor(self):
        """Render the configuration editor UI"""
        st.header("‚öôÔ∏è Advanced Configuration Editor")
        
        # Load current configuration
        current_config = self.load_current_config()
        if not current_config:
            st.error("Unable to load current configuration")
            return
        
        # Create tabs for different configuration sections
        tab1, tab2, tab3, tab4 = st.tabs(["üîë API Settings", "üìä Strategy", "üí∞ Risk Management", "üîß Advanced"])
        
        with tab1:
            st.subheader("API Configuration")
            api_key = st.text_input("API Key", value=current_config.get('API_KEY', ''), type="password")
            api_secret = st.text_input("API Secret", value=current_config.get('API_SECRET', ''), type="password")
            base_url = st.text_input("Base URL", value=current_config.get('BASE_URL', ''))
            
            symbol = st.selectbox("Trading Symbol", 
                                ["BTCUSD", "ETHUSD", "ADAUSD", "SOLUSD", "LINKUSD"],
                                index=0 if current_config.get('SYMBOL') == 'BTCUSD' else 0)
            
            product_id = st.number_input("Product ID", value=current_config.get('PRODUCT_ID', 27), min_value=1)
        
        with tab2:
            st.subheader("Strategy Parameters")
            
            col1, col2 = st.columns(2)
            with col1:
                ema_short = st.number_input("EMA Short Period", 
                                          value=current_config.get('EMA_SHORT', 9), 
                                          min_value=1, max_value=50)
                atr_period = st.number_input("ATR Period", 
                                           value=current_config.get('ATR_PERIOD', 14), 
                                           min_value=1, max_value=100)
                risk_reward = st.number_input("Risk-Reward Ratio", 
                                            value=current_config.get('RISK_REWARD_RATIO', 10), 
                                            min_value=1, max_value=50)
            
            with col2:
                ema_long = st.number_input("EMA Long Period", 
                                         value=current_config.get('EMA_LONG', 20), 
                                         min_value=2, max_value=200)
                atr_multiplier = st.number_input("ATR Multiplier", 
                                               value=current_config.get('ATR_MULTIPLIER', 0.5), 
                                               min_value=0.1, max_value=10.0, step=0.1)
                trailing_sl = st.checkbox("Enable Trailing Stop Loss", 
                                        value=current_config.get('TRAILING_SL', True))
            
            strategy_version = st.selectbox("Strategy Version", 
                                          ["v1", "v2", "v3"], 
                                          index=2 if current_config.get('STRATEGY_VERSION') == 'v3' else 0)
        
        with tab3:
            st.subheader("Capital & Risk Management")
            
            col1, col2 = st.columns(2)
            with col1:
                paper_capital = st.number_input("Paper Trading Capital ($)", 
                                              value=current_config.get('PAPER_TRADING_CAPITAL', 500), 
                                              min_value=100, max_value=100000)
                max_risk_percent = st.number_input("Max Risk Per Trade (%)", 
                                                 value=current_config.get('MAX_RISK_PER_TRADE', 0.02)*100, 
                                                 min_value=0.5, max_value=20.0, step=0.5)
            
            with col2:
                live_capital = st.number_input("Live Trading Capital ($)", 
                                             value=current_config.get('LIVE_TRADING_CAPITAL', 100), 
                                             min_value=50, max_value=50000)
                
                # Risk calculator
                st.info(f"üí° Risk per trade: ${paper_capital * (max_risk_percent/100):.2f}")
        
        with tab4:
            st.subheader("Advanced Settings")
            
            # Configuration presets
            st.subheader("üìã Configuration Presets")
            preset = st.selectbox("Load Preset", 
                                ["Current", "Conservative", "Aggressive", "Scalping"])
            
            if preset != "Current":
                if st.button(f"Load {preset} Preset"):
                    self.load_preset(preset)
                    st.rerun()
            
            # Export/Import
            st.subheader("üì§ Export/Import")
            if st.button("üìÑ Export Configuration"):
                config_json = json.dumps(current_config, indent=2)
                st.download_button(
                    label="Download config.json",
                    data=config_json,
                    file_name=f"trading_config_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )
        
        # Validation and Save
        st.divider()
        
        # Prepare config data
        new_config = {
            'API_KEY': api_key,
            'API_SECRET': api_secret,
            'BASE_URL': base_url,
            'SYMBOL': symbol,
            'PRODUCT_ID': product_id,
            'EMA_SHORT': ema_short,
            'EMA_LONG': ema_long,
            'ATR_PERIOD': atr_period,
            'ATR_MULTIPLIER': atr_multiplier,
            'RISK_REWARD_RATIO': risk_reward,
            'TRAILING_SL': trailing_sl,
            'STRATEGY_VERSION': strategy_version,
            'PAPER_TRADING_CAPITAL': paper_capital,
            'LIVE_TRADING_CAPITAL': live_capital,
            'MAX_RISK_PER_TRADE': max_risk_percent / 100
        }
        
        # Validate configuration
        validation_errors = self.validate_config(new_config)
        
        if validation_errors:
            st.error("‚ö†Ô∏è Configuration Validation Errors:")
            for error in validation_errors:
                st.error(f"‚Ä¢ {error}")
        else:
            st.success("‚úÖ Configuration is valid")
        
        # Save button
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üíæ Save Configuration", disabled=bool(validation_errors)):
                if self.save_config(new_config):
                    st.success("‚úÖ Configuration saved successfully!")
                    st.balloons()
                    time.sleep(2)
                    st.rerun()
        
        with col2:
            if st.button("üîÑ Reset to Defaults"):
                # Use session state to handle confirmation
                if 'confirm_reset' not in st.session_state:
                    st.session_state.confirm_reset = False
                
                if not st.session_state.confirm_reset:
                    st.session_state.confirm_reset = True
                    st.warning("‚ö†Ô∏è Click 'Reset to Defaults' again to confirm")
                else:
                    self.reset_to_defaults()
                    st.session_state.confirm_reset = False
                    st.rerun()
        
        with col3:
            if st.button("üìÅ Restore from Backup"):
                if self.restore_from_backup():
                    st.success("‚úÖ Configuration restored from backup!")
                    st.rerun()

# Import at the end to avoid circular imports
from datetime import datetime
import time
