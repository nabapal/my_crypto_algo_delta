//@version=5
strategy("EMA ATR Strategy - Unified (Exact Python Replica)", 
         overlay=true,
         default_qty_type=strategy.percent_of_equity, 
         default_qty_value=100,
         initial_capital=500,
         commission_type=strategy.commission.percent,
         commission_value=0.1)

// ========================================
// STRATEGY PARAMETERS (Matching your Python config)
// ========================================
EMA_SHORT = input.int(9, title="EMA Short Period", minval=1)
EMA_LONG = input.int(20, title="EMA Long Period", minval=1)
ATR_PERIOD = input.int(14, title="ATR Period", minval=1)
ATR_MULTIPLIER = input.float(0.5, title="ATR Multiplier", minval=0.1, step=0.1)
RISK_REWARD_RATIO = input.float(2.0, title="Risk Reward Ratio", minval=0.5, step=0.1)
TRAILING_SL = input.bool(true, title="Enable Trailing Stop")

// Strategy Version Selection (matching your v1, v2, v3)
STRATEGY_VERSION = input.string("v3", title="Strategy Version", options=["v1", "v2", "v3"])

// Risk Management
risk_percent = input.float(2.0, title="Risk Per Trade (%)", minval=0.1, maxval=10.0)

// ========================================
// TECHNICAL INDICATORS (Exact Python calculations)
// ========================================
ema_9 = ta.ema(close, EMA_SHORT)   // EMA9 in your Python code
ema_20 = ta.ema(close, EMA_LONG)   // EMA20 in your Python code
atr_value = ta.atr(ATR_PERIOD)     // ATR in your Python code

// ========================================
// SWING HIGH/LOW CALCULATION (10 lookback like Python)
// ========================================
lookback = 10
recent_swing_low = ta.lowest(low, lookback)
recent_swing_high = ta.highest(high, lookback)

// ========================================
// ENTRY CONDITIONS (Exact Python logic)
// ========================================
// Long condition: EMA9 > EMA20 AND Close > EMA9 AND ATR not NaN
long_condition = ema_9 > ema_20 and close > ema_9 and not na(atr_value)

// Short condition: EMA9 < EMA20 AND Close < EMA9 AND ATR not NaN  
short_condition = ema_9 < ema_20 and close < ema_9 and not na(atr_value)

// ========================================
// STOP LOSS & TAKE PROFIT CALCULATION (Matching Python)
// ========================================
var float long_entry_price = na
var float short_entry_price = na
var float long_sl = na
var float short_sl = na
var float long_tp = na
var float short_tp = na
var float long_initial_sl = na
var float short_initial_sl = na

// Long position calculations
if long_condition and strategy.position_size == 0
    long_entry_price := close
    long_sl := recent_swing_low - ATR_MULTIPLIER * atr_value
    risk_long = long_entry_price - long_sl
    long_tp := long_entry_price + (risk_long * RISK_REWARD_RATIO)
    long_initial_sl := long_sl

// Short position calculations  
if short_condition and strategy.position_size == 0
    short_entry_price := close
    short_sl := recent_swing_high + ATR_MULTIPLIER * atr_value
    risk_short = short_sl - short_entry_price
    short_tp := short_entry_price - (risk_short * RISK_REWARD_RATIO)
    short_initial_sl := short_sl

// ========================================
// TRAILING STOP LOGIC (Matching your v1, v2, v3 versions)
// ========================================
if strategy.position_size > 0 and TRAILING_SL // Long position
    if STRATEGY_VERSION == "v1" or STRATEGY_VERSION == "v2"
        long_sl := math.max(long_sl, ema_20)
    else if STRATEGY_VERSION == "v3"
        long_sl := math.max(long_sl, ema_9)

if strategy.position_size < 0 and TRAILING_SL // Short position
    if STRATEGY_VERSION == "v1" or STRATEGY_VERSION == "v3"
        short_sl := math.min(short_sl, ema_20)
    else if STRATEGY_VERSION == "v2"
        short_sl := math.min(short_sl, ema_9)

// ========================================
// POSITION SIZING (2% risk like Python)
// ========================================
equity = strategy.equity
risk_amount = equity * (risk_percent / 100)

long_qty = strategy.position_size == 0 and long_condition ? 
           risk_amount / math.abs(close - long_sl) : na
short_qty = strategy.position_size == 0 and short_condition ? 
            risk_amount / math.abs(short_sl - close) : na

// ========================================
// STRATEGY EXECUTION
// ========================================
if long_condition and strategy.position_size == 0 and long_qty > 0
    strategy.entry("LONG", strategy.long, qty=long_qty)

if short_condition and strategy.position_size == 0 and short_qty > 0
    strategy.entry("SHORT", strategy.short, qty=short_qty)

// Exit conditions
if strategy.position_size > 0 // Long position exits
    strategy.exit("LONG_EXIT", "LONG", stop=long_sl, limit=long_tp)

if strategy.position_size < 0 // Short position exits
    strategy.exit("SHORT_EXIT", "SHORT", stop=short_sl, limit=short_tp)

// ========================================
// VISUALIZATION (Matching your strategy)
// ========================================
plot(ema_9, color=color.blue, title="EMA 9", linewidth=2)
plot(ema_20, color=color.orange, title="EMA 20", linewidth=2)

// Entry signals
plotshape(long_condition and strategy.position_size == 0, 
          style=shape.triangleup, location=location.belowbar, 
          color=color.green, size=size.small, title="Long Entry")
plotshape(short_condition and strategy.position_size == 0, 
          style=shape.triangledown, location=location.abovebar, 
          color=color.red, size=size.small, title="Short Entry")

// Stop loss and take profit levels
plot(strategy.position_size > 0 ? long_sl : na, 
     color=color.red, style=plot.style_linebr, linewidth=2, title="Long SL")
plot(strategy.position_size > 0 ? long_tp : na, 
     color=color.green, style=plot.style_linebr, linewidth=2, title="Long TP")
plot(strategy.position_size < 0 ? short_sl : na, 
     color=color.red, style=plot.style_linebr, linewidth=2, title="Short SL")
plot(strategy.position_size < 0 ? short_tp : na, 
     color=color.green, style=plot.style_linebr, linewidth=2, title="Short TP")

// Swing levels for reference
plot(recent_swing_high, color=color.gray, style=plot.style_circles, title="Swing High")
plot(recent_swing_low, color=color.gray, style=plot.style_circles, title="Swing Low")

// ========================================
// PERFORMANCE METRICS TABLE
// ========================================
if barstate.islast
    var table performance_table = table.new(position.top_right, 2, 10, 
                                           bgcolor=color.white, border_width=1)
    
    // Calculate metrics
    total_trades = strategy.closedtrades
    winning_trades = strategy.wintrades
    losing_trades = strategy.losstrades
    win_rate = total_trades > 0 ? (winning_trades / total_trades) * 100 : 0
    profit_factor = strategy.grossprofit > 0 and strategy.grossloss > 0 ? 
                    strategy.grossprofit / math.abs(strategy.grossloss) : 0
    
    // Table headers and data
    table.cell(performance_table, 0, 0, "Metric", bgcolor=color.gray, text_color=color.white, text_size=size.small)
    table.cell(performance_table, 1, 0, "Value", bgcolor=color.gray, text_color=color.white, text_size=size.small)
    
    table.cell(performance_table, 0, 1, "Strategy Version", text_color=color.black, text_size=size.small)
    table.cell(performance_table, 1, 1, STRATEGY_VERSION, text_color=color.black, text_size=size.small)
    
    table.cell(performance_table, 0, 2, "Total Trades", text_color=color.black, text_size=size.small)
    table.cell(performance_table, 1, 2, str.tostring(total_trades), text_color=color.black, text_size=size.small)
    
    table.cell(performance_table, 0, 3, "Win Rate", text_color=color.black, text_size=size.small)
    table.cell(performance_table, 1, 3, str.tostring(win_rate, "#.##") + "%", text_color=color.black, text_size=size.small)
    
    table.cell(performance_table, 0, 4, "Net P&L", text_color=color.black, text_size=size.small)
    table.cell(performance_table, 1, 4, "$" + str.tostring(strategy.netprofit, "#.##"), 
               text_color=strategy.netprofit > 0 ? color.green : color.red, text_size=size.small)
    
    table.cell(performance_table, 0, 5, "Profit Factor", text_color=color.black, text_size=size.small)
    table.cell(performance_table, 1, 5, str.tostring(profit_factor, "#.##"), text_color=color.black, text_size=size.small)
    
    table.cell(performance_table, 0, 6, "Max Drawdown", text_color=color.black, text_size=size.small)
    table.cell(performance_table, 1, 6, str.tostring(strategy.max_drawdown, "#.##") + "%", 
               text_color=color.red, text_size=size.small)
    
    table.cell(performance_table, 0, 7, "Sharpe Ratio", text_color=color.black, text_size=size.small)
    table.cell(performance_table, 1, 7, str.tostring(strategy.sharpe, "#.##"), text_color=color.black, text_size=size.small)

// ========================================
// ALERTS FOR PAPER/LIVE TRADING
// ========================================
if long_condition and strategy.position_size == 0
    alert("LONG ENTRY: Price=" + str.tostring(close) + " SL=" + str.tostring(long_sl) + " TP=" + str.tostring(long_tp), alert.freq_once_per_bar)

if short_condition and strategy.position_size == 0
    alert("SHORT ENTRY: Price=" + str.tostring(close) + " SL=" + str.tostring(short_sl) + " TP=" + str.tostring(short_tp), alert.freq_once_per_bar)
