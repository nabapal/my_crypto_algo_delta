//@version=5
strategy("EMA ATR Strategy - Paper Trading Version", 
         overlay=true,
         default_qty_type=strategy.cash, 
         default_qty_value=10,  // Start with $10 per trade for paper trading
         initial_capital=500,   // Your $500 starting capital
         commission_type=strategy.commission.percent,
         commission_value=0.05, // Delta Exchange fees
         slippage=2)            // Account for slippage

// ========================================
// PAPER TRADING CONFIGURATION
// ========================================
// Enable this for paper trading mode
paper_trading_mode = input.bool(true, title="ðŸ“Š Paper Trading Mode")
alert_webhook_url = input.string("", title="ðŸ”” Webhook URL for Alerts")

// Strategy Parameters
EMA_SHORT = input.int(9, title="EMA Short Period")
EMA_LONG = input.int(20, title="EMA Long Period") 
ATR_PERIOD = input.int(14, title="ATR Period")
ATR_MULTIPLIER = input.float(0.5, title="ATR Multiplier")
RISK_REWARD_RATIO = input.float(2.0, title="Risk:Reward Ratio")
TRAILING_SL = input.bool(true, title="Enable Trailing Stop")
STRATEGY_VERSION = input.string("v3", title="Strategy Version", options=["v1", "v2", "v3"])

// Risk Management for Paper Trading
risk_percent = input.float(2.0, title="Risk Per Trade (%)")
max_position_size = input.float(100.0, title="Max Position Size ($)")

// Trading Hours (optional)
use_trading_hours = input.bool(false, title="Use Trading Hours Filter")
start_hour = input.int(9, title="Start Hour", minval=0, maxval=23)
end_hour = input.int(17, title="End Hour", minval=0, maxval=23)

// ========================================
// TECHNICAL INDICATORS
// ========================================
ema_9 = ta.ema(close, EMA_SHORT)
ema_20 = ta.ema(close, EMA_LONG)
atr_value = ta.atr(ATR_PERIOD)

// Swing levels
lookback = 10
recent_swing_low = ta.lowest(low, lookback)
recent_swing_high = ta.highest(high, lookback)

// ========================================
// TRADING HOURS FILTER
// ========================================
current_hour = hour(time)
in_trading_hours = use_trading_hours ? 
                   (current_hour >= start_hour and current_hour <= end_hour) : true

// ========================================
// ENTRY CONDITIONS
// ========================================
long_condition = ema_9 > ema_20 and close > ema_9 and not na(atr_value) and in_trading_hours
short_condition = ema_9 < ema_20 and close < ema_9 and not na(atr_value) and in_trading_hours

// ========================================
// POSITION MANAGEMENT
// ========================================
var float long_entry_price = na
var float short_entry_price = na
var float long_sl = na
var float short_sl = na
var float long_tp = na
var float short_tp = na

// Entry logic with proper position sizing
if long_condition and strategy.position_size == 0
    long_entry_price := close
    long_sl := recent_swing_low - ATR_MULTIPLIER * atr_value
    risk_long = long_entry_price - long_sl
    long_tp := long_entry_price + (risk_long * RISK_REWARD_RATIO)
    
    // Calculate position size
    equity = strategy.equity
    risk_amount = equity * (risk_percent / 100)
    position_size = math.min(risk_amount / risk_long, max_position_size)
    
    if position_size > 0 and risk_long > 0
        strategy.entry("LONG", strategy.long, qty=position_size)

if short_condition and strategy.position_size == 0
    short_entry_price := close
    short_sl := recent_swing_high + ATR_MULTIPLIER * atr_value
    risk_short = short_sl - short_entry_price
    short_tp := short_entry_price - (risk_short * RISK_REWARD_RATIO)
    
    // Calculate position size
    equity = strategy.equity
    risk_amount = equity * (risk_percent / 100)
    position_size = math.min(risk_amount / risk_short, max_position_size)
    
    if position_size > 0 and risk_short > 0
        strategy.entry("SHORT", strategy.short, qty=position_size)

// ========================================
// TRAILING STOP LOGIC
// ========================================
if strategy.position_size > 0 and TRAILING_SL
    if STRATEGY_VERSION == "v1" or STRATEGY_VERSION == "v2"
        long_sl := math.max(long_sl, ema_20)
    else if STRATEGY_VERSION == "v3"
        long_sl := math.max(long_sl, ema_9)

if strategy.position_size < 0 and TRAILING_SL
    if STRATEGY_VERSION == "v1" or STRATEGY_VERSION == "v3"
        short_sl := math.min(short_sl, ema_20)
    else if STRATEGY_VERSION == "v2"
        short_sl := math.min(short_sl, ema_9)

// ========================================
// EXIT CONDITIONS
// ========================================
if strategy.position_size > 0
    strategy.exit("LONG_EXIT", "LONG", stop=long_sl, limit=long_tp)

if strategy.position_size < 0
    strategy.exit("SHORT_EXIT", "SHORT", stop=short_sl, limit=short_tp)

// ========================================
// VISUALIZATION
// ========================================
plot(ema_9, color=color.blue, title="EMA 9", linewidth=2)
plot(ema_20, color=color.orange, title="EMA 20", linewidth=2)

plotshape(long_condition and strategy.position_size == 0, 
          style=shape.triangleup, location=location.belowbar, 
          color=color.green, size=size.small, title="Long Signal")
plotshape(short_condition and strategy.position_size == 0, 
          style=shape.triangledown, location=location.abovebar, 
          color=color.red, size=size.small, title="Short Signal")

// Current position levels
plot(strategy.position_size > 0 ? long_sl : na, 
     color=color.red, style=plot.style_linebr, linewidth=2, title="Long SL")
plot(strategy.position_size > 0 ? long_tp : na, 
     color=color.green, style=plot.style_linebr, linewidth=2, title="Long TP")
plot(strategy.position_size < 0 ? short_sl : na, 
     color=color.red, style=plot.style_linebr, linewidth=2, title="Short SL")
plot(strategy.position_size < 0 ? short_tp : na, 
     color=color.green, style=plot.style_linebr, linewidth=2, title="Short TP")

// ========================================
// PAPER TRADING ALERTS
// ========================================
var string alert_message = ""

if long_condition and strategy.position_size == 0
    alert_message := "ðŸŸ¢ LONG ENTRY SIGNAL\n" +
                     "Symbol: " + syminfo.ticker + "\n" +
                     "Price: $" + str.tostring(close, "#.##") + "\n" +
                     "Stop Loss: $" + str.tostring(long_sl, "#.##") + "\n" +
                     "Take Profit: $" + str.tostring(long_tp, "#.##") + "\n" +
                     "Risk: $" + str.tostring(close - long_sl, "#.##") + "\n" +
                     "Reward: $" + str.tostring(long_tp - close, "#.##") + "\n" +
                     "Strategy: " + STRATEGY_VERSION
    alert(alert_message, alert.freq_once_per_bar)

if short_condition and strategy.position_size == 0
    alert_message := "ðŸ”´ SHORT ENTRY SIGNAL\n" +
                     "Symbol: " + syminfo.ticker + "\n" +
                     "Price: $" + str.tostring(close, "#.##") + "\n" +
                     "Stop Loss: $" + str.tostring(short_sl, "#.##") + "\n" +
                     "Take Profit: $" + str.tostring(short_tp, "#.##") + "\n" +
                     "Risk: $" + str.tostring(short_sl - close, "#.##") + "\n" +
                     "Reward: $" + str.tostring(close - short_tp, "#.##") + "\n" +
                     "Strategy: " + STRATEGY_VERSION
    alert(alert_message, alert.freq_once_per_bar)

// Exit alerts
if strategy.position_size[1] > 0 and strategy.position_size == 0
    alert("ðŸŸ¢ LONG POSITION CLOSED - " + syminfo.ticker + " at $" + str.tostring(close, "#.##"), alert.freq_once_per_bar)

if strategy.position_size[1] < 0 and strategy.position_size == 0
    alert("ðŸ”´ SHORT POSITION CLOSED - " + syminfo.ticker + " at $" + str.tostring(close, "#.##"), alert.freq_once_per_bar)

// ========================================
// PERFORMANCE DASHBOARD
// ========================================
if barstate.islast and paper_trading_mode
    var table dashboard = table.new(position.top_right, 2, 12, 
                                   bgcolor=color.white, border_width=2)
    
    // Header
    table.cell(dashboard, 0, 0, "ðŸ“Š PAPER TRADING DASHBOARD", 
               colspan=2, bgcolor=color.blue, text_color=color.white, text_size=size.normal)
    
    // Strategy Info
    table.cell(dashboard, 0, 1, "Strategy Version", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 1, STRATEGY_VERSION, text_color=color.blue, text_size=size.small)
    
    // Performance Metrics
    total_trades = strategy.closedtrades
    win_rate = total_trades > 0 ? (strategy.wintrades / total_trades) * 100 : 0
    
    table.cell(dashboard, 0, 2, "Total Trades", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 2, str.tostring(total_trades), text_color=color.black, text_size=size.small)
    
    table.cell(dashboard, 0, 3, "Win Rate", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 3, str.tostring(win_rate, "#.#") + "%", 
               text_color=win_rate >= 50 ? color.green : color.red, text_size=size.small)
    
    table.cell(dashboard, 0, 4, "Net P&L", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 4, "$" + str.tostring(strategy.netprofit, "#.##"), 
               text_color=strategy.netprofit > 0 ? color.green : color.red, text_size=size.small)
    
    table.cell(dashboard, 0, 5, "Portfolio Value", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 5, "$" + str.tostring(strategy.equity, "#.##"), 
               text_color=color.black, text_size=size.small)
    
    table.cell(dashboard, 0, 6, "Max Drawdown", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 6, str.tostring(strategy.max_drawdown, "#.#") + "%", 
               text_color=color.red, text_size=size.small)
    
    table.cell(dashboard, 0, 7, "Profit Factor", text_color=color.black, text_size=size.small)
    pf = strategy.grossprofit / math.abs(strategy.grossloss)
    table.cell(dashboard, 1, 7, str.tostring(pf, "#.##"), 
               text_color=pf > 1 ? color.green : color.red, text_size=size.small)
    
    // Current Position Info
    table.cell(dashboard, 0, 8, "Position Size", text_color=color.black, text_size=size.small)
    pos_text = strategy.position_size > 0 ? "LONG" : strategy.position_size < 0 ? "SHORT" : "NONE"
    pos_color = strategy.position_size > 0 ? color.green : strategy.position_size < 0 ? color.red : color.gray
    table.cell(dashboard, 1, 8, pos_text, text_color=pos_color, text_size=size.small)
    
    if strategy.position_size != 0
        table.cell(dashboard, 0, 9, "Unrealized P&L", text_color=color.black, text_size=size.small)
        table.cell(dashboard, 1, 9, "$" + str.tostring(strategy.openprofit, "#.##"), 
                   text_color=strategy.openprofit > 0 ? color.green : color.red, text_size=size.small)
    
    // Risk Info
    table.cell(dashboard, 0, 10, "Risk Per Trade", text_color=color.black, text_size=size.small)
    table.cell(dashboard, 1, 10, str.tostring(risk_percent) + "%", text_color=color.black, text_size=size.small)
    
    table.cell(dashboard, 0, 11, "Next Signal", text_color=color.black, text_size=size.small)
    next_signal = long_condition and strategy.position_size == 0 ? "LONG" : 
                  short_condition and strategy.position_size == 0 ? "SHORT" : "WAITING"
    signal_color = next_signal == "LONG" ? color.green : next_signal == "SHORT" ? color.red : color.gray
    table.cell(dashboard, 1, 11, next_signal, text_color=signal_color, text_size=size.small)
